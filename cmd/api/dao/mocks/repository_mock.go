// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock_dao is a generated GoMock package.
package mock_dao

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/afonsojota/cleancoder_rest-scripts/cmd/api/models"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// InsertTicket mocks base method
func (m *MockRepository) InsertTicket(c *models.Ticket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTicket", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTicket indicates an expected call of InsertTicket
func (mr *MockRepositoryMockRecorder) InsertTicket(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTicket", reflect.TypeOf((*MockRepository)(nil).InsertTicket), c)
}

// Changetickettatus mocks base method
func (m *MockRepository) Changetickettatus(c *models.Ticket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changetickettatus", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Changetickettatus indicates an expected call of Changetickettatus
func (mr *MockRepositoryMockRecorder) Changetickettatus(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changetickettatus", reflect.TypeOf((*MockRepository)(nil).Changetickettatus), c)
}

// InsertInputFile mocks base method
func (m *MockRepository) InsertInputFile(i *models.InputFile) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertInputFile", i)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertInputFile indicates an expected call of InsertInputFile
func (mr *MockRepositoryMockRecorder) InsertInputFile(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertInputFile", reflect.TypeOf((*MockRepository)(nil).InsertInputFile), i)
}

// ChangeInputFileStatus mocks base method
func (m *MockRepository) ChangeInputFileStatus(i *models.InputFile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeInputFileStatus", i)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeInputFileStatus indicates an expected call of ChangeInputFileStatus
func (mr *MockRepositoryMockRecorder) ChangeInputFileStatus(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeInputFileStatus", reflect.TypeOf((*MockRepository)(nil).ChangeInputFileStatus), i)
}

// InsertSendErrors mocks base method
func (m *MockRepository) InsertSendErrors(s *models.SendErros) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSendErrors", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSendErrors indicates an expected call of InsertSendErrors
func (mr *MockRepositoryMockRecorder) InsertSendErrors(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSendErrors", reflect.TypeOf((*MockRepository)(nil).InsertSendErrors), s)
}
