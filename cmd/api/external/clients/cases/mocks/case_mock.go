// Code generated by MockGen. DO NOT EDIT.
// Source: ./ticket.go

// Package mock_ticket is a generated GoMock package.
package mock_ticket

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/afonsojota/cleancoder_rest-scripts/cmd/api/models"
	reflect "reflect"
)

// MockGateway is a mock of Gateway interface
type MockGateway struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayMockRecorder
}

// MockGatewayMockRecorder is the mock recorder for MockGateway
type MockGatewayMockRecorder struct {
	mock *MockGateway
}

// NewMockGateway creates a new mock instance
func NewMockGateway(ctrl *gomock.Controller) *MockGateway {
	mock := &MockGateway{ctrl: ctrl}
	mock.recorder = &MockGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGateway) EXPECT() *MockGatewayMockRecorder {
	return m.recorder
}

// CloseTicket mocks base method
func (m *MockGateway) CloseTicket(c *models.Ticket, owner string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseTicket", c, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseTicket indicates an expected call of CloseTicket
func (mr *MockGatewayMockRecorder) CloseTicket(c, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseTicket", reflect.TypeOf((*MockGateway)(nil).CloseTicket), c, owner)
}

// ChangeQueue mocks base method
func (m *MockGateway) ChangeQueue(c *models.Ticket, owner string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeQueue", c, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeQueue indicates an expected call of ChangeQueue
func (mr *MockGatewayMockRecorder) ChangeQueue(c, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeQueue", reflect.TypeOf((*MockGateway)(nil).ChangeQueue), c, owner)
}

// OpenTicket mocks base method
func (m *MockGateway) OpenTicket(c *models.Ticket, owner string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTicket", c, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenTicket indicates an expected call of OpenTicket
func (mr *MockGatewayMockRecorder) OpenTicket(c, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTicket", reflect.TypeOf((*MockGateway)(nil).OpenTicket), c, owner)
}
